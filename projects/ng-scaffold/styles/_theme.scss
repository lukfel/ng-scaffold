@use '@angular/material' as mat;
@include mat.elevation-classes();
@include mat.app-background();

// Default theme
$lf-default-theme: (
  primary: mat.m2-define-palette(mat.$m2-blue-palette),
  accent: mat.m2-define-palette(mat.$m2-pink-palette, A200, A100, A400),
  warn: mat.m2-define-palette(mat.$m2-red-palette),
  dark: false,
  font-family: 'Roboto'
);

// Set theme
// Material requires to split up the mat.all-component-themes and mat.all-component-colors
// since mat.all-component-themes should also be imported once, but mat.all-component-colors
// can be imported multiple times
@mixin scaffold-theme($theme: $lf-default-theme) {
  $theme: map-merge($lf-default-theme, $theme);

  @if(map-get($theme, 'dark') == false) {
    $mat-theme: mat.m2-define-light-theme((
      color: (
        primary: map-get($theme, 'primary'),
        accent: map-get($theme, 'accent'),
        warn: map-get($theme, 'warn'),
      ),
      typography: mat.m2-define-typography-config(
        $font-family: map-get($theme, 'font-family')
      ),
      density: 0,
    ));
    @include mat.all-component-themes($mat-theme);
  } @else {
    $mat-theme: mat.m2-define-dark-theme((
      color: (
        primary: map-get($theme, 'primary'),
        accent: map-get($theme, 'accent'),
        warn: map-get($theme, 'warn'),
      ),
      typography: mat.m2-define-typography-config(
        $font-family: map-get($theme, 'font-family')
      ),
      density: 0,
    ));
    @include mat.all-component-themes($mat-theme);
  }
  @include color-variables($theme, 'body');
}

// Set colors
@mixin scaffold-colors($theme: $lf-default-theme, $class) {
  $theme: map-merge($lf-default-theme, $theme);

  .#{$class} {
    @if(map-get($theme, 'dark') == false) {
      $mat-theme: mat.m2-define-light-theme((
        color: (
          primary: map-get($theme, 'primary'),
          accent: map-get($theme, 'accent'),
          warn: map-get($theme, 'warn'),
        )
      ));
      @include mat.all-component-colors($mat-theme);
    } @else {
      $mat-theme: mat.m2-define-dark-theme((
        color: (
          primary: map-get($theme, 'primary'),
          accent: map-get($theme, 'accent'),
          warn: map-get($theme, 'warn'),
        )
      ));
      @include mat.all-component-colors($mat-theme);
    }
  }

  @include color-variables($theme, #{'body.'+$class});
}

@mixin color-variables($theme, $scope) {
  #{$scope}{
    --color-primary: #{mat.m2-get-color-from-palette(map-get($theme, 'primary'))};
    --color-accent: #{mat.m2-get-color-from-palette(map-get($theme, 'accent'))};
    --color-warn: #{mat.m2-get-color-from-palette(map-get($theme, 'warn'))};

    @for $i from 0 through 9 {
      $hue: $i * 100;
      @if ($hue == 0) {
        $hue: 50
      }

      --color-primary-#{$hue}: #{mat.m2-get-color-from-palette(map-get($theme, 'primary'), $hue)};
      --color-accent-#{$hue}: #{mat.m2-get-color-from-palette(map-get($theme, 'accent'), $hue)};
      --color-warn-#{$hue}: #{mat.m2-get-color-from-palette(map-get($theme, 'warn'), $hue)};
    }
  }
}
